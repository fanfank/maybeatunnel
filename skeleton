功能：
    支持PROXY及不完全的SOCKS5协议；
    client与server同构无需分开下载两份程序；
    程序小、速度快、跨平台；
    *负载高时使用类LRU规则丢弃老连接；
    *支持高可扩展性，在建立连接时、读取请求前、读取请求后、发送请求前、发送
        请求后都可以自定义回调函数（参照Nginx）；
    *支持用户验证及基本的流量统计、控制功能；
注：带*的功能一期不做实现，但会写入到整体架构中

进程模型：多进程，主进程负责信号接收、子进程的创建重启等操作，子进程负责
    accept新连接。参照Nginx的基本结构。（Why not 多线程？）

IO模型：异步，非阻塞

一期进程主要流程：
    主进程：
        解析命令行参数；
        解析json配置文件；
        读取PROXY/SOCKS5选项；
        读取信息读取时解密选项，信息发送时加密选项；
        读取接收IP（可忽略）及端口；
        读取目标IP及端口；
        读取源密钥以及目标密钥
        创建一个有名信号量用于子进程争夺accept新套接字的权利；
        添加监听套接字到cycle中；
        派生子进程(或后续提供单进程模式)；
        移除监听套接字并将其关闭；
        添加父进程信号捕捉句柄到cycle中；
        添加配置文件状态变化句柄到cycle中（一期回调函数直接return即可）；

    子进程：
        添加子进程信号捕捉句柄到cycle中；

一期主要回调函数流程：
    主进程：
        信号捕捉：
            INT则发送INT到子进程并等待其结束，平滑退出程序；
            TERM、KILL则直接杀死子进程，并退出程序；
            USR1则逐步发送INT到子进程，同时创建新的子进程；
        文件状态变化：
            发送USR1信号给进程本身

    子进程：
        信号捕捉：
            TODO
        监听套接字：
            新连接事件则尝试获取全局锁，失败则直接返回，否则accept新连接，
                标记当前连接是来自源机器，适当accept一定数量后释放全局锁，
                然后创建一个到目标机器的新连接，新连接添加到cycle中，将两
                个连接进行关联（根据源连接的keep-alive选项决定是否使用
                keep-alive）；
        普通套接字：
            读事件：
                如果是来自源机器的套接字，则马上写入到对应的目标机器套接字
                    中。读取和写入的过程中需要进行解密、加密；
                如果是来自目标机器的套接字，则马上写入到对应的源机器套接字
                    中。读取和写入的过程中需要进行解密、加密；
            写事件：
                暂无
            关闭事件：
                关闭对应的源、目标机器相关联的套接字；
                
                

